@model MoneyFlow.Models.SummaryView;
@using MoneyFlow.Models;
@using MoneyFlow.Data;
@using MoneyFlow.Constants;
@using System.Collections.Generic;
@using Newtonsoft.Json;

@{
    var baseUrl = $"{Context.Request.Scheme}://{Context.Request.Host}";
    var totalCostByDateJson = JsonConvert.SerializeObject(Model.TotalCostByDate);
    int zIndex = 0;
    long maxTarget = Model.Savings;
    if (Model.MotivationList.Count() != 0 && maxTarget < Model.MotivationList.Max(x => x.TargetPrice))
    {
        maxTarget = Model.MotivationList.Max(x => x.TargetPrice);        
    }
    float savingPosition = maxTarget == 0 ? 100 : ((float)Model.Savings / maxTarget) * (float)100;
    List<string> ballons = new List<string>();
    List<long> itemPrices = new List<long>();
    List<ModalView<string>> modalBuys = new List<ModalView<string>>();
}

<div class="text-center">
    <h4>MoneyFlow</h4>
</div>

<div class="container">
    <div>
        <div class="row d-flex justify-content-center my-2" style="max-height: 360px;">
            <canvas id="lastWeekExpensesChartId"></canvas>
        </div>
    </div>
    <div class="my-4">
        <div class="text-center">
            <h4>Barang Impian</h4>
        </div>
        <div style="height: 125px; position: relative;">
            @foreach (Motivation motivation in Model.MotivationList)
            {
                zIndex += 1;
                string ballonId = $"balloonBarId{motivation.Id}";
                string imgUrl = $"{baseUrl}/file/image/{GeneralConstants.PURPOSE_MOTIVATIONS}/{motivation.TargetImage}";
                ballons.Add(ballonId);
                itemPrices.Add(motivation.TargetPrice);

                <div id='@ballonId' class="balloon" >
                @if (Model.Savings <= motivation.TargetPrice)
                {
                    <div class="balloon-image" style="background-image: url('@imgUrl');" 
                        data-container="body" data-toggle="popover" data-placement="top" data-trigger="hover" data-content="@motivation.TargetName">
                        <svg class="pointer-warning" width="96" height="125">
                            <path d="M2 50 L48 125 L94 50 Z"/>
                        </svg>
                    </div>   
                } else
                {
                    string actionUrl = $"/motivations/buy/{motivation.Id}";
                    string submitId = $"submit{motivation.Id}";
                    string modalId = $"modal{motivation.Id}";
                    modalBuys.Add(new ModalView<string>(
                        modalId,
                        actionUrl,
                        "Beli",
                        motivation.TargetName
                    ){
                        SubmitId = submitId
                    });
                    <form id="@submitId" class="d-none" method="post" action="@actionUrl">
                    </form>
                    <div class="clickable balloon-image" style="background-image: url('@imgUrl');" 
                        data-container="body" data-toggle="popover" data-placement="top" data-trigger="hover" data-content="@motivation.TargetName"
                        onclick="openModal('@modalId')">
                        <svg class="pointer-success" width="96" height="125">
                            <path d="M2 50 L48 125 L94 50 Z"/>
                        </svg>
                    </div>
                }
                </div>
            }
        </div>
        
        <div class="progress" role="progressbar" id="progressBarId">
            <div style="width: @savingPosition%;">
                <div class="progress-bar progress-transition">@Html.DisplayFor(modelItem => Model.Savings, "Money")</div>
            </div>
        </div>
    </div>
</div>

@foreach(ModalView<string> modal in modalBuys)
{
    @await Html.PartialAsync("~/Views/Shared/Components/DetailComponents/ModalConfirmationBuy.cshtml", modal);
}

<script>
    loadChart(
        @Html.Raw(totalCostByDateJson)
    );
    setBalloonPos(
        @Html.Raw(JsonConvert.SerializeObject(ballons)),
        @Html.Raw(JsonConvert.SerializeObject(itemPrices)),
        @maxTarget
    )
    setupPopover()
</script>