@using MoneyFlow.Models;
@using MoneyFlow.Models.ViewModels;
@model MoneyFlow.Models.ViewModels.TableViewModel<Product>;

@{
    var baseUrl = $"{Context.Request.Scheme}://{Context.Request.Host}";
    List<ConfirmationModalViewModel<string>> modalDeleteList = new List<ConfirmationModalViewModel<string>>();
    ViewData["ModalDelete"] = "deleteProductModal";
}

<h4 class="text-center my-3"><b>@ViewData["Title"]</b></h4>

<div class="d-flex align-items-center my-2">
    <div>Cari produk:</div>
    <div class="col d-flex flex-grow-1">
        <form action="/product" method="get" class="d-flex flex-grow-1 mb-0">
            <input type="text" name="keyword" value="@ViewData["keyword"]" placeholder="Cari..." class="flex-grow-1 m-1">
            <button type="submit" class="btn btn-primary m-1"><i class="bi bi-search mr-1"></i>Cari</button>
        </form>
    </div>
    <div class="d-flex">
        <form action="/product/create" method="get" class="mb-0">
            <button type="submit" class="btn btn-success"><i class="bi bi-plus-lg mr-1"></i>Buat baru</button>
        </form>
    </div>
</div>


<table class="table">
    <thead>
        <tr>
            <th class="text-center">
                Produk
            </th>
            <th class="text-center">
                Tipe
            </th>
            <th class="text-center">
                Harga
            </th>
            <th class="text-center">
                URL Gambar
            </th>
            <th class="text-center">Aksi</th>
        </tr>
    </thead>
    @if (Model.Data.Count != 0) 
    {
        <tbody>    
            @foreach (var item in Model.Data) 
            {;
                var modalDeleteId = $"modalDelete{item.Id}";
                modalDeleteList.Add(new ConfirmationModalViewModel<string>(
                    "delete", modalDeleteId, $"/product/delete/{item.Id}", "hapus produk"
                ));
                <tr>
                    <td class="align-middle">
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td class="align-middle">
                        @Html.DisplayFor(modelItem => item.ProductType)
                    </td>
                    <td class="align-middle">
                        @Html.DisplayFor(modelItem => item.Price)
                    </td>
                    <td class="align-middle">
                        @Html.DisplayFor(modelItem => item.ImageUrl)
                    </td>
                    <td class="row justify-content-center align-middle">
                        <button type="button" onclick="openModal('@modalDeleteId')" class="btn btn-danger">Hapus</button>
                        <form action="/product/update/@item.Id" method="get" class="mb-0">
                            <div class="form-group flex-grow-1 ml-1 my-0">
                                <input type="submit" value="Ubah" class="btn btn-primary" />
                            </div>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    } 
</table>
@if (Model.Data.Count == 0)
{
    @await Html.PartialAsync("~/Views/Shared/Components/EmptyDataView.cshtml");
} else
{
    foreach (ConfirmationModalViewModel<string> modalDelete in modalDeleteList)
    {
        @await Html.PartialAsync("~/Views/Shared/Components/ConfirmationModalView.cshtml", modalDelete);
    }
}

@await Html.PartialAsync("~/Views/Shared/Components/PaginationView.cshtml", Model.PaginationView)
